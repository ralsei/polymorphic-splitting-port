; Generated by CF Analysis Racket port with run-time check optimization 
; (cf:control 'poly 'if-split '!const-split '!verbose '!times '(cons-limit 8) '(inline-cost 20) 'stats)
; CAUTION: #<void> are unbound, this code may not be safe
; 0 TOTAL Runtime Checks
; 5425 program points, 3527 distinct values, 5416 values in the graph
; 1748 entries in call map
(define CF-caar (lambda (x) (car (car x))))
(define CF-cadr (lambda (x) (car (cdr x))))
(define CF-caddr (lambda (x) (car (cdr (cdr x)))))
(define CF-cadddr (lambda (x) (car (cdr (cdr (cdr x))))))
(define CF-list (lambda a a))
(define CF-assq
   (lambda (k l)
     (if (null? l) #f (if (eq? (CF-caar l) k) (car l) (CF-assq k (cdr l))))))
(define CF-member
   (lambda (v l)
     (if (null? l) #f (if (equal? v (car l)) l (CF-member v (cdr l))))))
(define *namelist* '())
(define *lastlook* (qcons 'xxx (qcons '() '())))
(define nameprop
   (lambda (name)
     (if (eq? name (car *lastlook*))
       *lastlook*
       (let ((pair (CF-assq name *namelist*)))
         (begin (if pair (set! *lastlook* pair) (void)) pair)))))
(define get
   (lambda (name prop)
     (let ((r (nameprop name)))
       (if (pair? r)
         (let ((s (CF-assq prop (cdr r)))) (if (pair? s) (cdr s) #f))
         #f))))
(define put
   (lambda (name prop valu)
     (begin
       (let ((r (nameprop name)))
         (if (pair? r)
           (let ((s (CF-assq prop (cdr r))))
             (if (pair? s)
               (set-cdr! s valu)
               (let ((item (cons prop valu)))
                 (set-cdr! r (cons item (cdr r))))))
           (let ((item (cons prop valu)))
             (set! *namelist* (cons (cons name (CF-list item)) *namelist*)))))
       valu)))
(define reinit-prop!
   (lambda ()
     (begin
       (set! *namelist* '())
       (set! *lastlook* (qcons 'xxx (qcons '() '()))))))
(define run-benchmark
   (lambda (benchmark-name benchmark-thunk)
     (let ((ten
            (lambda ()
              (begin
                (benchmark-thunk)
                (benchmark-thunk)
                (benchmark-thunk)
                (benchmark-thunk)
                (benchmark-thunk)
                (benchmark-thunk)
                (benchmark-thunk)
                (benchmark-thunk)
                (benchmark-thunk)
                (benchmark-thunk)))))
       (begin (ten) (ten) (ten) (ten)))))
(define get-null (lambda (name prop) (or (get name prop) '())))
(define unify-subst 0)
(define temp-temp 0)
(define add-lemma
   (lambda (term)
     (if (and (pair? term) (eq? (car term) 'equal) (pair? (CF-cadr term)))
       (put
        (car (CF-cadr term))
        'lemmas
        (cons term (get-null (car (CF-cadr term)) 'lemmas)))
       (error 'add-lemma "ADD-LEMMA did not like term:  " term))))
(define add-lemma-lst
   (lambda (lst)
     (if (null? lst)
       #t
       (begin (add-lemma (car lst)) (add-lemma-lst (cdr lst))))))
(define apply-subst
   (lambda (alist term)
     (if (not (pair? term))
       (if (begin (set! temp-temp (CF-assq term alist)) temp-temp)
         (cdr temp-temp)
         term)
       (cons (car term) (apply-subst-lst alist (cdr term))))))
(define apply-subst-lst
   (lambda (alist lst)
     (if (null? lst)
       '()
       (cons
        (apply-subst alist (car lst))
        (apply-subst-lst alist (cdr lst))))))
(define falsep
   (lambda (x lst) (or (equal? x (qcons 'f '())) (CF-member x lst))))
(define one-way-unify
   (lambda (term1 term2)
     (begin (set! unify-subst '()) (one-way-unify1 term1 term2))))
(define one-way-unify1
   (lambda (term1 term2)
     (if (not (pair? term2))
       (if (begin (set! temp-temp (CF-assq term2 unify-subst)) temp-temp)
         (equal? term1 (cdr temp-temp))
         (begin (set! unify-subst (cons (cons term2 term1) unify-subst)) #t))
       (if (not (pair? term1))
         #f
         (if (eq? (car term1) (car term2))
           (one-way-unify1-lst (cdr term1) (cdr term2))
           #f)))))
(define one-way-unify1-lst
   (lambda (lst1 lst2)
     (if (null? lst1)
       #t
       (if (one-way-unify1 (car lst1) (car lst2))
         (one-way-unify1-lst (cdr lst1) (cdr lst2))
         #f))))
(define rewrite
   (lambda (term)
     (if (not (pair? term))
       term
       (rewrite-with-lemmas
        (cons (car term) (rewrite-args (cdr term)))
        (get-null (car term) 'lemmas)))))
(define rewrite-args
   (lambda (lst)
     (if (null? lst) '() (cons (rewrite (car lst)) (rewrite-args (cdr lst))))))
(define rewrite-with-lemmas
   (lambda (term lst)
     (if (null? lst)
       term
       (if (one-way-unify term (CF-cadr (car lst)))
         (rewrite (apply-subst unify-subst (CF-caddr (car lst))))
         (rewrite-with-lemmas term (cdr lst))))))
(define setup
   (lambda ()
     (add-lemma-lst
      (qmerge-list
       (qcons
        'equal
        (qcons
         (qcons 'compile (qcons 'form '()))
         (qcons
          (qcons
           'reverse
           (qcons
            (qcons
             'codegen
             (qcons
              (qcons 'optimize (qcons 'form '()))
              (qcons (qcons 'nil '()) '())))
            '()))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'eqp (qcons 'x (qcons 'y '())))
         (qcons
          (qcons
           'equal
           (qcons
            (qcons 'fix (qcons 'x '()))
            (qcons (qcons 'fix (qcons 'y '())) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'greaterp (qcons 'x (qcons 'y '())))
         (qcons (qcons 'lessp (qcons 'y (qcons 'x '()))) '())))
       (qcons
        'equal
        (qcons
         (qcons 'lesseqp (qcons 'x (qcons 'y '())))
         (qcons
          (qcons 'not (qcons (qcons 'lessp (qcons 'y (qcons 'x '()))) '()))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'greatereqp (qcons 'x (qcons 'y '())))
         (qcons
          (qcons 'not (qcons (qcons 'lessp (qcons 'x (qcons 'y '()))) '()))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'boolean (qcons 'x '()))
         (qcons
          (qcons
           'or
           (qcons
            (qcons 'equal (qcons 'x (qcons (qcons 't '()) '())))
            (qcons (qcons 'equal (qcons 'x (qcons (qcons 'f '()) '()))) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'iff (qcons 'x (qcons 'y '())))
         (qcons
          (qcons
           'and
           (qcons
            (qcons 'implies (qcons 'x (qcons 'y '())))
            (qcons (qcons 'implies (qcons 'y (qcons 'x '()))) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'even1 (qcons 'x '()))
         (qcons
          (qcons
           'if
           (qcons
            (qcons 'zerop (qcons 'x '()))
            (qcons
             (qcons 't '())
             (qcons (qcons 'odd (qcons (qcons '1- (qcons 'x '())) '())) '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'countps- (qcons 'l (qcons 'pred '())))
         (qcons
          (qcons
           'countps-loop
           (qcons 'l (qcons 'pred (qcons (qcons 'zero '()) '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'fact- (qcons 'i '()))
         (qcons (qcons 'fact-loop (qcons 'i (qcons 1 '()))) '())))
       (qcons
        'equal
        (qcons
         (qcons 'reverse- (qcons 'x '()))
         (qcons
          (qcons 'reverse-loop (qcons 'x (qcons (qcons 'nil '()) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'divides (qcons 'x (qcons 'y '())))
         (qcons
          (qcons
           'zerop
           (qcons (qcons 'remainder (qcons 'y (qcons 'x '()))) '()))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'assume-true (qcons 'var (qcons 'alist '())))
         (qcons
          (qcons
           'cons
           (qcons
            (qcons 'cons (qcons 'var (qcons (qcons 't '()) '())))
            (qcons 'alist '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'assume-false (qcons 'var (qcons 'alist '())))
         (qcons
          (qcons
           'cons
           (qcons
            (qcons 'cons (qcons 'var (qcons (qcons 'f '()) '())))
            (qcons 'alist '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'tautology-checker (qcons 'x '()))
         (qcons
          (qcons
           'tautologyp
           (qcons
            (qcons 'normalize (qcons 'x '()))
            (qcons (qcons 'nil '()) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'falsify (qcons 'x '()))
         (qcons
          (qcons
           'falsify1
           (qcons
            (qcons 'normalize (qcons 'x '()))
            (qcons (qcons 'nil '()) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'prime (qcons 'x '()))
         (qcons
          (qcons
           'and
           (qcons
            (qcons 'not (qcons (qcons 'zerop (qcons 'x '())) '()))
            (qcons
             (qcons
              'not
              (qcons
               (qcons
                'equal
                (qcons
                 'x
                 (qcons (qcons 'add1 (qcons (qcons 'zero '()) '())) '())))
               '()))
             (qcons
              (qcons 'prime1 (qcons 'x (qcons (qcons '1- (qcons 'x '())) '())))
              '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'and (qcons 'p (qcons 'q '())))
         (qcons
          (qcons
           'if
           (qcons
            'p
            (qcons
             (qcons
              'if
              (qcons 'q (qcons (qcons 't '()) (qcons (qcons 'f '()) '()))))
             (qcons (qcons 'f '()) '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'or (qcons 'p (qcons 'q '())))
         (qcons
          (qcons
           'if
           (qcons
            'p
            (qcons
             (qcons 't '())
             (qcons
              (qcons
               'if
               (qcons 'q (qcons (qcons 't '()) (qcons (qcons 'f '()) '()))))
              (qcons (qcons 'f '()) '())))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'not (qcons 'p '()))
         (qcons
          (qcons
           'if
           (qcons 'p (qcons (qcons 'f '()) (qcons (qcons 't '()) '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'implies (qcons 'p (qcons 'q '())))
         (qcons
          (qcons
           'if
           (qcons
            'p
            (qcons
             (qcons
              'if
              (qcons 'q (qcons (qcons 't '()) (qcons (qcons 'f '()) '()))))
             (qcons (qcons 't '()) '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'fix (qcons 'x '()))
         (qcons
          (qcons
           'if
           (qcons
            (qcons 'numberp (qcons 'x '()))
            (qcons 'x (qcons (qcons 'zero '()) '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'if
          (qcons
           (qcons 'if (qcons 'a (qcons 'b (qcons 'c '()))))
           (qcons 'd (qcons 'e '()))))
         (qcons
          (qcons
           'if
           (qcons
            'a
            (qcons
             (qcons 'if (qcons 'b (qcons 'd (qcons 'e '()))))
             (qcons (qcons 'if (qcons 'c (qcons 'd (qcons 'e '())))) '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'zerop (qcons 'x '()))
         (qcons
          (qcons
           'or
           (qcons
            (qcons 'equal (qcons 'x (qcons (qcons 'zero '()) '())))
            (qcons
             (qcons 'not (qcons (qcons 'numberp (qcons 'x '())) '()))
             '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'plus
          (qcons (qcons 'plus (qcons 'x (qcons 'y '()))) (qcons 'z '())))
         (qcons
          (qcons
           'plus
           (qcons 'x (qcons (qcons 'plus (qcons 'y (qcons 'z '()))) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'equal
          (qcons
           (qcons 'plus (qcons 'a (qcons 'b '())))
           (qcons (qcons 'zero '()) '())))
         (qcons
          (qcons
           'and
           (qcons
            (qcons 'zerop (qcons 'a '()))
            (qcons (qcons 'zerop (qcons 'b '())) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'difference (qcons 'x (qcons 'x '())))
         (qcons (qcons 'zero '()) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'equal
          (qcons
           (qcons 'plus (qcons 'a (qcons 'b '())))
           (qcons (qcons 'plus (qcons 'a (qcons 'c '()))) '())))
         (qcons
          (qcons
           'equal
           (qcons
            (qcons 'fix (qcons 'b '()))
            (qcons (qcons 'fix (qcons 'c '())) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'equal
          (qcons
           (qcons 'zero '())
           (qcons (qcons 'difference (qcons 'x (qcons 'y '()))) '())))
         (qcons
          (qcons 'not (qcons (qcons 'lessp (qcons 'y (qcons 'x '()))) '()))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'equal
          (qcons 'x (qcons (qcons 'difference (qcons 'x (qcons 'y '()))) '())))
         (qcons
          (qcons
           'and
           (qcons
            (qcons 'numberp (qcons 'x '()))
            (qcons
             (qcons
              'or
              (qcons
               (qcons 'equal (qcons 'x (qcons (qcons 'zero '()) '())))
               (qcons (qcons 'zerop (qcons 'y '())) '())))
             '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'meaning
          (qcons
           (qcons
            'plus-tree
            (qcons (qcons 'append (qcons 'x (qcons 'y '()))) '()))
           (qcons 'a '())))
         (qcons
          (qcons
           'plus
           (qcons
            (qcons
             'meaning
             (qcons (qcons 'plus-tree (qcons 'x '())) (qcons 'a '())))
            (qcons
             (qcons
              'meaning
              (qcons (qcons 'plus-tree (qcons 'y '())) (qcons 'a '())))
             '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'meaning
          (qcons
           (qcons 'plus-tree (qcons (qcons 'plus-fringe (qcons 'x '())) '()))
           (qcons 'a '())))
         (qcons
          (qcons 'fix (qcons (qcons 'meaning (qcons 'x (qcons 'a '()))) '()))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'append
          (qcons (qcons 'append (qcons 'x (qcons 'y '()))) (qcons 'z '())))
         (qcons
          (qcons
           'append
           (qcons 'x (qcons (qcons 'append (qcons 'y (qcons 'z '()))) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'reverse (qcons (qcons 'append (qcons 'a (qcons 'b '()))) '()))
         (qcons
          (qcons
           'append
           (qcons
            (qcons 'reverse (qcons 'b '()))
            (qcons (qcons 'reverse (qcons 'a '())) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'times
          (qcons 'x (qcons (qcons 'plus (qcons 'y (qcons 'z '()))) '())))
         (qcons
          (qcons
           'plus
           (qcons
            (qcons 'times (qcons 'x (qcons 'y '())))
            (qcons (qcons 'times (qcons 'x (qcons 'z '()))) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'times
          (qcons (qcons 'times (qcons 'x (qcons 'y '()))) (qcons 'z '())))
         (qcons
          (qcons
           'times
           (qcons 'x (qcons (qcons 'times (qcons 'y (qcons 'z '()))) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'equal
          (qcons
           (qcons 'times (qcons 'x (qcons 'y '())))
           (qcons (qcons 'zero '()) '())))
         (qcons
          (qcons
           'or
           (qcons
            (qcons 'zerop (qcons 'x '()))
            (qcons (qcons 'zerop (qcons 'y '())) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'exec
          (qcons
           (qcons 'append (qcons 'x (qcons 'y '())))
           (qcons 'pds (qcons 'envrn '()))))
         (qcons
          (qcons
           'exec
           (qcons
            'y
            (qcons
             (qcons 'exec (qcons 'x (qcons 'pds (qcons 'envrn '()))))
             (qcons 'envrn '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'mc-flatten (qcons 'x (qcons 'y '())))
         (qcons
          (qcons
           'append
           (qcons (qcons 'flatten (qcons 'x '())) (qcons 'y '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'member
          (qcons 'x (qcons (qcons 'append (qcons 'a (qcons 'b '()))) '())))
         (qcons
          (qcons
           'or
           (qcons
            (qcons 'member (qcons 'x (qcons 'a '())))
            (qcons (qcons 'member (qcons 'x (qcons 'b '()))) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'member (qcons 'x (qcons (qcons 'reverse (qcons 'y '())) '())))
         (qcons (qcons 'member (qcons 'x (qcons 'y '()))) '())))
       (qcons
        'equal
        (qcons
         (qcons 'length (qcons (qcons 'reverse (qcons 'x '())) '()))
         (qcons (qcons 'length (qcons 'x '())) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'member
          (qcons 'a (qcons (qcons 'intersect (qcons 'b (qcons 'c '()))) '())))
         (qcons
          (qcons
           'and
           (qcons
            (qcons 'member (qcons 'a (qcons 'b '())))
            (qcons (qcons 'member (qcons 'a (qcons 'c '()))) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'nth (qcons (qcons 'zero '()) (qcons 'i '())))
         (qcons (qcons 'zero '()) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'exp
          (qcons 'i (qcons (qcons 'plus (qcons 'j (qcons 'k '()))) '())))
         (qcons
          (qcons
           'times
           (qcons
            (qcons 'exp (qcons 'i (qcons 'j '())))
            (qcons (qcons 'exp (qcons 'i (qcons 'k '()))) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'exp
          (qcons 'i (qcons (qcons 'times (qcons 'j (qcons 'k '()))) '())))
         (qcons
          (qcons
           'exp
           (qcons (qcons 'exp (qcons 'i (qcons 'j '()))) (qcons 'k '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'reverse-loop (qcons 'x (qcons 'y '())))
         (qcons
          (qcons
           'append
           (qcons (qcons 'reverse (qcons 'x '())) (qcons 'y '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'reverse-loop (qcons 'x (qcons (qcons 'nil '()) '())))
         (qcons (qcons 'reverse (qcons 'x '())) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'count-list
          (qcons 'z (qcons (qcons 'sort-lp (qcons 'x (qcons 'y '()))) '())))
         (qcons
          (qcons
           'plus
           (qcons
            (qcons 'count-list (qcons 'z (qcons 'x '())))
            (qcons (qcons 'count-list (qcons 'z (qcons 'y '()))) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'equal
          (qcons
           (qcons 'append (qcons 'a (qcons 'b '())))
           (qcons (qcons 'append (qcons 'a (qcons 'c '()))) '())))
         (qcons (qcons 'equal (qcons 'b (qcons 'c '()))) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'plus
          (qcons
           (qcons 'remainder (qcons 'x (qcons 'y '())))
           (qcons
            (qcons
             'times
             (qcons
              'y
              (qcons (qcons 'quotient (qcons 'x (qcons 'y '()))) '())))
            '())))
         (qcons (qcons 'fix (qcons 'x '())) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'power-eval
          (qcons
           (qcons 'big-plus1 (qcons 'l (qcons 'i (qcons 'base '()))))
           (qcons 'base '())))
         (qcons
          (qcons
           'plus
           (qcons
            (qcons 'power-eval (qcons 'l (qcons 'base '())))
            (qcons 'i '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'power-eval
          (qcons
           (qcons 'big-plus (qcons 'x (qcons 'y (qcons 'i (qcons 'base '())))))
           (qcons 'base '())))
         (qcons
          (qcons
           'plus
           (qcons
            'i
            (qcons
             (qcons
              'plus
              (qcons
               (qcons 'power-eval (qcons 'x (qcons 'base '())))
               (qcons (qcons 'power-eval (qcons 'y (qcons 'base '()))) '())))
             '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'remainder (qcons 'y (qcons 1 '())))
         (qcons (qcons 'zero '()) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'lessp
          (qcons (qcons 'remainder (qcons 'x (qcons 'y '()))) (qcons 'y '())))
         (qcons (qcons 'not (qcons (qcons 'zerop (qcons 'y '())) '())) '())))
       (qcons
        'equal
        (qcons
         (qcons 'remainder (qcons 'x (qcons 'x '())))
         (qcons (qcons 'zero '()) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'lessp
          (qcons (qcons 'quotient (qcons 'i (qcons 'j '()))) (qcons 'i '())))
         (qcons
          (qcons
           'and
           (qcons
            (qcons 'not (qcons (qcons 'zerop (qcons 'i '())) '()))
            (qcons
             (qcons
              'or
              (qcons
               (qcons 'zerop (qcons 'j '()))
               (qcons
                (qcons
                 'not
                 (qcons (qcons 'equal (qcons 'j (qcons 1 '()))) '()))
                '())))
             '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'lessp
          (qcons (qcons 'remainder (qcons 'x (qcons 'y '()))) (qcons 'x '())))
         (qcons
          (qcons
           'and
           (qcons
            (qcons 'not (qcons (qcons 'zerop (qcons 'y '())) '()))
            (qcons
             (qcons 'not (qcons (qcons 'zerop (qcons 'x '())) '()))
             (qcons
              (qcons 'not (qcons (qcons 'lessp (qcons 'x (qcons 'y '()))) '()))
              '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'power-eval
          (qcons
           (qcons 'power-rep (qcons 'i (qcons 'base '())))
           (qcons 'base '())))
         (qcons (qcons 'fix (qcons 'i '())) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'power-eval
          (qcons
           (qcons
            'big-plus
            (qcons
             (qcons 'power-rep (qcons 'i (qcons 'base '())))
             (qcons
              (qcons 'power-rep (qcons 'j (qcons 'base '())))
              (qcons (qcons 'zero '()) (qcons 'base '())))))
           (qcons 'base '())))
         (qcons (qcons 'plus (qcons 'i (qcons 'j '()))) '())))
       (qcons
        'equal
        (qcons
         (qcons 'gcd (qcons 'x (qcons 'y '())))
         (qcons (qcons 'gcd (qcons 'y (qcons 'x '()))) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'nth
          (qcons (qcons 'append (qcons 'a (qcons 'b '()))) (qcons 'i '())))
         (qcons
          (qcons
           'append
           (qcons
            (qcons 'nth (qcons 'a (qcons 'i '())))
            (qcons
             (qcons
              'nth
              (qcons
               'b
               (qcons
                (qcons
                 'difference
                 (qcons 'i (qcons (qcons 'length (qcons 'a '())) '())))
                '())))
             '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'difference
          (qcons (qcons 'plus (qcons 'x (qcons 'y '()))) (qcons 'x '())))
         (qcons (qcons 'fix (qcons 'y '())) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'difference
          (qcons (qcons 'plus (qcons 'y (qcons 'x '()))) (qcons 'x '())))
         (qcons (qcons 'fix (qcons 'y '())) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'difference
          (qcons
           (qcons 'plus (qcons 'x (qcons 'y '())))
           (qcons (qcons 'plus (qcons 'x (qcons 'z '()))) '())))
         (qcons (qcons 'difference (qcons 'y (qcons 'z '()))) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'times
          (qcons 'x (qcons (qcons 'difference (qcons 'c (qcons 'w '()))) '())))
         (qcons
          (qcons
           'difference
           (qcons
            (qcons 'times (qcons 'c (qcons 'x '())))
            (qcons (qcons 'times (qcons 'w (qcons 'x '()))) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'remainder
          (qcons (qcons 'times (qcons 'x (qcons 'z '()))) (qcons 'z '())))
         (qcons (qcons 'zero '()) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'difference
          (qcons
           (qcons
            'plus
            (qcons 'b (qcons (qcons 'plus (qcons 'a (qcons 'c '()))) '())))
           (qcons 'a '())))
         (qcons (qcons 'plus (qcons 'b (qcons 'c '()))) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'difference
          (qcons
           (qcons 'add1 (qcons (qcons 'plus (qcons 'y (qcons 'z '()))) '()))
           (qcons 'z '())))
         (qcons (qcons 'add1 (qcons 'y '())) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'lessp
          (qcons
           (qcons 'plus (qcons 'x (qcons 'y '())))
           (qcons (qcons 'plus (qcons 'x (qcons 'z '()))) '())))
         (qcons (qcons 'lessp (qcons 'y (qcons 'z '()))) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'lessp
          (qcons
           (qcons 'times (qcons 'x (qcons 'z '())))
           (qcons (qcons 'times (qcons 'y (qcons 'z '()))) '())))
         (qcons
          (qcons
           'and
           (qcons
            (qcons 'not (qcons (qcons 'zerop (qcons 'z '())) '()))
            (qcons (qcons 'lessp (qcons 'x (qcons 'y '()))) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'lessp
          (qcons 'y (qcons (qcons 'plus (qcons 'x (qcons 'y '()))) '())))
         (qcons (qcons 'not (qcons (qcons 'zerop (qcons 'x '())) '())) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'gcd
          (qcons
           (qcons 'times (qcons 'x (qcons 'z '())))
           (qcons (qcons 'times (qcons 'y (qcons 'z '()))) '())))
         (qcons
          (qcons
           'times
           (qcons 'z (qcons (qcons 'gcd (qcons 'x (qcons 'y '()))) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'value
          (qcons (qcons 'normalize (qcons 'x '())) (qcons 'a '())))
         (qcons (qcons 'value (qcons 'x (qcons 'a '()))) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'equal
          (qcons
           (qcons 'flatten (qcons 'x '()))
           (qcons (qcons 'cons (qcons 'y (qcons (qcons 'nil '()) '()))) '())))
         (qcons
          (qcons
           'and
           (qcons
            (qcons 'nlistp (qcons 'x '()))
            (qcons (qcons 'equal (qcons 'x (qcons 'y '()))) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'listp (qcons (qcons 'gopher (qcons 'x '())) '()))
         (qcons (qcons 'listp (qcons 'x '())) '())))
       (qcons
        'equal
        (qcons
         (qcons 'samefringe (qcons 'x (qcons 'y '())))
         (qcons
          (qcons
           'equal
           (qcons
            (qcons 'flatten (qcons 'x '()))
            (qcons (qcons 'flatten (qcons 'y '())) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'equal
          (qcons
           (qcons 'greatest-factor (qcons 'x (qcons 'y '())))
           (qcons (qcons 'zero '()) '())))
         (qcons
          (qcons
           'and
           (qcons
            (qcons
             'or
             (qcons
              (qcons 'zerop (qcons 'y '()))
              (qcons (qcons 'equal (qcons 'y (qcons 1 '()))) '())))
            (qcons
             (qcons 'equal (qcons 'x (qcons (qcons 'zero '()) '())))
             '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'equal
          (qcons
           (qcons 'greatest-factor (qcons 'x (qcons 'y '())))
           (qcons 1 '())))
         (qcons (qcons 'equal (qcons 'x (qcons 1 '()))) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'numberp
          (qcons (qcons 'greatest-factor (qcons 'x (qcons 'y '()))) '()))
         (qcons
          (qcons
           'not
           (qcons
            (qcons
             'and
             (qcons
              (qcons
               'or
               (qcons
                (qcons 'zerop (qcons 'y '()))
                (qcons (qcons 'equal (qcons 'y (qcons 1 '()))) '())))
              (qcons
               (qcons 'not (qcons (qcons 'numberp (qcons 'x '())) '()))
               '())))
            '()))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'times-list
          (qcons (qcons 'append (qcons 'x (qcons 'y '()))) '()))
         (qcons
          (qcons
           'times
           (qcons
            (qcons 'times-list (qcons 'x '()))
            (qcons (qcons 'times-list (qcons 'y '())) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'prime-list
          (qcons (qcons 'append (qcons 'x (qcons 'y '()))) '()))
         (qcons
          (qcons
           'and
           (qcons
            (qcons 'prime-list (qcons 'x '()))
            (qcons (qcons 'prime-list (qcons 'y '())) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'equal
          (qcons 'z (qcons (qcons 'times (qcons 'w (qcons 'z '()))) '())))
         (qcons
          (qcons
           'and
           (qcons
            (qcons 'numberp (qcons 'z '()))
            (qcons
             (qcons
              'or
              (qcons
               (qcons 'equal (qcons 'z (qcons (qcons 'zero '()) '())))
               (qcons (qcons 'equal (qcons 'w (qcons 1 '()))) '())))
             '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'greatereqpr (qcons 'x (qcons 'y '())))
         (qcons
          (qcons 'not (qcons (qcons 'lessp (qcons 'x (qcons 'y '()))) '()))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'equal
          (qcons 'x (qcons (qcons 'times (qcons 'x (qcons 'y '()))) '())))
         (qcons
          (qcons
           'or
           (qcons
            (qcons 'equal (qcons 'x (qcons (qcons 'zero '()) '())))
            (qcons
             (qcons
              'and
              (qcons
               (qcons 'numberp (qcons 'x '()))
               (qcons (qcons 'equal (qcons 'y (qcons 1 '()))) '())))
             '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'remainder
          (qcons (qcons 'times (qcons 'y (qcons 'x '()))) (qcons 'y '())))
         (qcons (qcons 'zero '()) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'equal
          (qcons (qcons 'times (qcons 'a (qcons 'b '()))) (qcons 1 '())))
         (qcons
          (qcons
           'and
           (qcons
            (qcons
             'not
             (qcons
              (qcons 'equal (qcons 'a (qcons (qcons 'zero '()) '())))
              '()))
            (qcons
             (qcons
              'not
              (qcons
               (qcons 'equal (qcons 'b (qcons (qcons 'zero '()) '())))
               '()))
             (qcons
              (qcons 'numberp (qcons 'a '()))
              (qcons
               (qcons 'numberp (qcons 'b '()))
               (qcons
                (qcons
                 'equal
                 (qcons
                  (qcons '1- (qcons 'a '()))
                  (qcons (qcons 'zero '()) '())))
                (qcons
                 (qcons
                  'equal
                  (qcons
                   (qcons '1- (qcons 'b '()))
                   (qcons (qcons 'zero '()) '())))
                 '())))))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'lessp
          (qcons
           (qcons
            'length
            (qcons (qcons 'delete (qcons 'x (qcons 'l '()))) '()))
           (qcons (qcons 'length (qcons 'l '())) '())))
         (qcons (qcons 'member (qcons 'x (qcons 'l '()))) '())))
       (qcons
        'equal
        (qcons
         (qcons 'sort2 (qcons (qcons 'delete (qcons 'x (qcons 'l '()))) '()))
         (qcons
          (qcons 'delete (qcons 'x (qcons (qcons 'sort2 (qcons 'l '())) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'dsort (qcons 'x '()))
         (qcons (qcons 'sort2 (qcons 'x '())) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'length
          (qcons
           (qcons
            'cons
            (qcons
             'x1
             (qcons
              (qcons
               'cons
               (qcons
                'x2
                (qcons
                 (qcons
                  'cons
                  (qcons
                   'x3
                   (qcons
                    (qcons
                     'cons
                     (qcons
                      'x4
                      (qcons
                       (qcons
                        'cons
                        (qcons
                         'x5
                         (qcons
                          (qcons 'cons (qcons 'x6 (qcons 'x7 '())))
                          '())))
                       '())))
                    '())))
                 '())))
              '())))
           '()))
         (qcons
          (qcons 'plus (qcons 6 (qcons (qcons 'length (qcons 'x7 '())) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'difference
          (qcons
           (qcons 'add1 (qcons (qcons 'add1 (qcons 'x '())) '()))
           (qcons 2 '())))
         (qcons (qcons 'fix (qcons 'x '())) '())))
       (qcons
        'equal
        (qcons
         (qcons
          'quotient
          (qcons
           (qcons
            'plus
            (qcons 'x (qcons (qcons 'plus (qcons 'x (qcons 'y '()))) '())))
           (qcons 2 '())))
         (qcons
          (qcons
           'plus
           (qcons 'x (qcons (qcons 'quotient (qcons 'y (qcons 2 '()))) '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'sigma (qcons (qcons 'zero '()) (qcons 'i '())))
         (qcons
          (qcons
           'quotient
           (qcons
            (qcons 'times (qcons 'i (qcons (qcons 'add1 (qcons 'i '())) '())))
            (qcons 2 '())))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'plus (qcons 'x (qcons (qcons 'add1 (qcons 'y '())) '())))
         (qcons
          (qcons
           'if
           (qcons
            (qcons 'numberp (qcons 'y '()))
            (qcons
             (qcons 'add1 (qcons (qcons 'plus (qcons 'x (qcons 'y '()))) '()))
             (qcons (qcons 'add1 (qcons 'x '())) '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'equal
          (qcons
           (qcons 'difference (qcons 'x (qcons 'y '())))
           (qcons (qcons 'difference (qcons 'z (qcons 'y '()))) '())))
         (qcons
          (qcons
           'if
           (qcons
            (qcons 'lessp (qcons 'x (qcons 'y '())))
            (qcons
             (qcons 'not (qcons (qcons 'lessp (qcons 'y (qcons 'z '()))) '()))
             (qcons
              (qcons
               'if
               (qcons
                (qcons 'lessp (qcons 'z (qcons 'y '())))
                (qcons
                 (qcons
                  'not
                  (qcons (qcons 'lessp (qcons 'y (qcons 'x '()))) '()))
                 (qcons
                  (qcons
                   'equal
                   (qcons
                    (qcons 'fix (qcons 'x '()))
                    (qcons (qcons 'fix (qcons 'z '())) '())))
                  '()))))
              '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'meaning
          (qcons
           (qcons
            'plus-tree
            (qcons (qcons 'delete (qcons 'x (qcons 'y '()))) '()))
           (qcons 'a '())))
         (qcons
          (qcons
           'if
           (qcons
            (qcons 'member (qcons 'x (qcons 'y '())))
            (qcons
             (qcons
              'difference
              (qcons
               (qcons
                'meaning
                (qcons (qcons 'plus-tree (qcons 'y '())) (qcons 'a '())))
               (qcons (qcons 'meaning (qcons 'x (qcons 'a '()))) '())))
             (qcons
              (qcons
               'meaning
               (qcons (qcons 'plus-tree (qcons 'y '())) (qcons 'a '())))
              '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'times (qcons 'x (qcons (qcons 'add1 (qcons 'y '())) '())))
         (qcons
          (qcons
           'if
           (qcons
            (qcons 'numberp (qcons 'y '()))
            (qcons
             (qcons
              'plus
              (qcons 'x (qcons (qcons 'times (qcons 'x (qcons 'y '()))) '())))
             (qcons (qcons 'fix (qcons 'x '())) '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'nth (qcons (qcons 'nil '()) (qcons 'i '())))
         (qcons
          (qcons
           'if
           (qcons
            (qcons 'zerop (qcons 'i '()))
            (qcons (qcons 'nil '()) (qcons (qcons 'zero '()) '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'last (qcons (qcons 'append (qcons 'a (qcons 'b '()))) '()))
         (qcons
          (qcons
           'if
           (qcons
            (qcons 'listp (qcons 'b '()))
            (qcons
             (qcons 'last (qcons 'b '()))
             (qcons
              (qcons
               'if
               (qcons
                (qcons 'listp (qcons 'a '()))
                (qcons
                 (qcons
                  'cons
                  (qcons
                   (qcons 'car (qcons (qcons 'last (qcons 'a '())) '()))
                   (qcons 'b '())))
                 (qcons 'b '()))))
              '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'equal
          (qcons (qcons 'lessp (qcons 'x (qcons 'y '()))) (qcons 'z '())))
         (qcons
          (qcons
           'if
           (qcons
            (qcons 'lessp (qcons 'x (qcons 'y '())))
            (qcons
             (qcons 'equal (qcons 't (qcons 'z '())))
             (qcons (qcons 'equal (qcons 'f (qcons 'z '()))) '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'assignment
          (qcons 'x (qcons (qcons 'append (qcons 'a (qcons 'b '()))) '())))
         (qcons
          (qcons
           'if
           (qcons
            (qcons 'assignedp (qcons 'x (qcons 'a '())))
            (qcons
             (qcons 'assignment (qcons 'x (qcons 'a '())))
             (qcons (qcons 'assignment (qcons 'x (qcons 'b '()))) '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons 'car (qcons (qcons 'gopher (qcons 'x '())) '()))
         (qcons
          (qcons
           'if
           (qcons
            (qcons 'listp (qcons 'x '()))
            (qcons
             (qcons 'car (qcons (qcons 'flatten (qcons 'x '())) '()))
             (qcons (qcons 'zero '()) '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'flatten
          (qcons (qcons 'cdr (qcons (qcons 'gopher (qcons 'x '())) '())) '()))
         (qcons
          (qcons
           'if
           (qcons
            (qcons 'listp (qcons 'x '()))
            (qcons
             (qcons 'cdr (qcons (qcons 'flatten (qcons 'x '())) '()))
             (qcons
              (qcons
               'cons
               (qcons (qcons 'zero '()) (qcons (qcons 'nil '()) '())))
              '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'quotient
          (qcons (qcons 'times (qcons 'y (qcons 'x '()))) (qcons 'y '())))
         (qcons
          (qcons
           'if
           (qcons
            (qcons 'zerop (qcons 'y '()))
            (qcons (qcons 'zero '()) (qcons (qcons 'fix (qcons 'x '())) '()))))
          '())))
       (qcons
        'equal
        (qcons
         (qcons
          'get
          (qcons
           'j
           (qcons (qcons 'set (qcons 'i (qcons 'val (qcons 'mem '())))) '())))
         (qcons
          (qcons
           'if
           (qcons
            (qcons 'eqp (qcons 'j (qcons 'i '())))
            (qcons 'val (qcons (qcons 'get (qcons 'j (qcons 'mem '()))) '()))))
          '())))))))
(define tautologyp
   (lambda (x true-lst false-lst)
     (if (truep x true-lst)
       #t
       (if (falsep x false-lst)
         #f
         (if (not (pair? x))
           #f
           (if (eq? (car x) 'if)
             (if (truep (CF-cadr x) true-lst)
               (tautologyp (CF-caddr x) true-lst false-lst)
               (if (falsep (CF-cadr x) false-lst)
                 (tautologyp (CF-cadddr x) true-lst false-lst)
                 (and (tautologyp
                       (CF-caddr x)
                       (cons (CF-cadr x) true-lst)
                       false-lst)
                      (tautologyp
                       (CF-cadddr x)
                       true-lst
                       (cons (CF-cadr x) false-lst)))))
             #f))))))
(define tautp (lambda (x) (tautologyp (rewrite x) '() '())))
(define test
   (lambda ()
     (letrec ((ans #f) (term #f))
       (begin
         (set! term
           (apply-subst
            (qcons
             (qcons
              'x
              (qcons
               'f
               (qcons
                (qcons
                 'plus
                 (qcons
                  (qcons 'plus (qcons 'a (qcons 'b '())))
                  (qcons
                   (qcons 'plus (qcons 'c (qcons (qcons 'zero '()) '())))
                   '())))
                '())))
             (qcons
              (qcons
               'y
               (qcons
                'f
                (qcons
                 (qcons
                  'times
                  (qcons
                   (qcons 'times (qcons 'a (qcons 'b '())))
                   (qcons (qcons 'plus (qcons 'c (qcons 'd '()))) '())))
                 '())))
              (qcons
               (qcons
                'z
                (qcons
                 'f
                 (qcons
                  (qcons
                   'reverse
                   (qcons
                    (qcons
                     'append
                     (qcons
                      (qcons 'append (qcons 'a (qcons 'b '())))
                      (qcons (qcons 'nil '()) '())))
                    '()))
                  '())))
               (qcons
                (qcons
                 'u
                 (qcons
                  'equal
                  (qcons
                   (qcons 'plus (qcons 'a (qcons 'b '())))
                   (qcons (qcons 'difference (qcons 'x (qcons 'y '()))) '()))))
                (qcons
                 (qcons
                  'w
                  (qcons
                   'lessp
                   (qcons
                    (qcons 'remainder (qcons 'a (qcons 'b '())))
                    (qcons
                     (qcons
                      'member
                      (qcons 'a (qcons (qcons 'length (qcons 'b '())) '())))
                     '()))))
                 '())))))
            (qcons
             'implies
             (qcons
              (qcons
               'and
               (qcons
                (qcons 'implies (qcons 'x (qcons 'y '())))
                (qcons
                 (qcons
                  'and
                  (qcons
                   (qcons 'implies (qcons 'y (qcons 'z '())))
                   (qcons
                    (qcons
                     'and
                     (qcons
                      (qcons 'implies (qcons 'z (qcons 'u '())))
                      (qcons (qcons 'implies (qcons 'u (qcons 'w '()))) '())))
                    '())))
                 '())))
              (qcons (qcons 'implies (qcons 'x (qcons 'w '()))) '())))))
         (set! ans (tautp term))
         ans))))
(define trans-of-implies
   (lambda (n)
     (CF-list 'implies (trans-of-implies1 n) (CF-list 'implies 0 n))))
(define trans-of-implies1
   (lambda (n)
     (if (equal? n 1)
       (CF-list 'implies 0 1)
       (CF-list
        'and
        (CF-list 'implies (- n 1) n)
        (trans-of-implies1 (- n 1))))))
(define truep
   (lambda (x lst) (or (equal? x (qcons 't '())) (CF-member x lst))))
(run-benchmark "Boyer" (lambda () (begin (setup) (test))))
